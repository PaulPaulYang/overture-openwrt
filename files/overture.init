#!/bin/sh /etc/rc.common

USE_PROCD=1

START=99

# config_get_cfgid <TYPE>
config_get_cfgid() {
	local cfgid filteredcfgid
	for cfgid in $CONFIG_SECTIONS; do
		if [ $(config_get $cfgid TYPE) == $1 ]; then
			filteredcfgid="$filteredcfgid $cfgid"
		fi
	done
	echo $filteredcfgid
}

# generate_json <cfgid>
# this func is for overture instance
generate_json() {
	local cfgid array
	json_init
	json_add_string BindAddress $(config_get $1 BindAddress)
	json_add_string DebugHTTPAddress $(config_get $1 DebugHTTPAddress)
	json_add_array PrimaryDNS
		for cfgid in $(config_get $1 PrimaryDNS); do
			json_add_object
			json_add_string Name $(config_get $cfgid Name)
			json_add_string Address $(config_get $cfgid Address)
			json_add_string Protocol $(config_get $cfgid Protocol)
			json_add_string SOCKS5Address $(config_get $cfgid SOCKS5Address)
			json_add_int Timeout $(config_get $cfgid Timeout)
			json_add_object EDNSClientSubnet
			json_close_object
			json_close_object
		done
	json_close_array
	json_add_array AlternativeDNS
		for cfgid in $(config_get $1 AlternativeDNS); do
			json_add_object
			json_add_string Name $(config_get $cfgid Name)
			json_add_string Address $(config_get $cfgid Address)
			json_add_string Protocol $(config_get $cfgid Protocol)
			json_add_string SOCKS5Address $(config_get $cfgid SOCKS5Address)
			json_add_int Timeout $(config_get $cfgid Timeout)
			json_add_object EDNSClientSubnet
			json_close_object
			json_close_object
		done
	json_close_array
	[ $(config_get $1 OnlyPrimaryDNS) == "true" ] && _tmp=1 || _tmp=0
	json_add_boolean OnlyPrimaryDNS $_tmp
	[ $(config_get $1 IPv6UseAlternativeDNS) == "true" ] && _tmp=1 || _tmp=0
	json_add_boolean IPv6UseAlternativeDNS $_tmp
	json_add_string WhenPrimaryDNSAnswerNoneUse $(config_get $1 WhenPrimaryDNSAnswerNoneUse)
	json_add_object IPNetworkFile
		json_add_string Primary $(config_get $1 IPNetworkFilePrimary)
		json_add_string Alternative $(config_get $1 IPNetworkFileAlternative)
	json_close_object
	json_add_object DomainFile
		json_add_string Primary $(config_get $1 DomainFilePrimary)
		json_add_string Alternative $(config_get $1 DomainFileAlternative)
		json_add_string Matcher $(config_get $1 DomainFileMatcher)
	json_close_object
	json_add_string HostsFile $(config_get $1 HostsFile)
	json_add_int MinimumTTL $(config_get $1 MinimumTTL)
	json_add_string DomainTTLFile $(config_get $1 DomainTTLFile)
	json_add_int CacheSize $(config_get $1 CacheSize)
	json_add_array RejectQType
		for array in $(config_get $1 RejectQType); do
			json_add_int "" $array
		done
	json_close_array
	echo $(json_dump) > /var/run/overture/overture-$1.json
}

start_overture() {
	procd_open_instance $1
	procd_set_param command overture -c /var/run/overture/overture-$1.json
	procd_set_param pidfile /var/run/overture/overture-$1.pid
	procd_set_param respawn
	procd_set_param stdout 1
	procd_set_param stderr 1
	procd_close_instance
}

for_each_server() {
	local cfgid
	for cfgid in $(config_get_cfgid overture); do
		generate_json $cfgid
		start_overture $cfgid
	done
}

# ===== Begin of PROCD part ===== #

start_service() {
	mkdir /var/run/overture
	config_load overture
	for_each_server
}

stop_service() {
	rm -r /var/run/overture
}
